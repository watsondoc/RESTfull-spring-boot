package com.test.services.impl;

import com.test.entities.Attribute;
import com.test.entities.Value;
import com.test.exceptions.AttributesUsedException;
import com.test.exceptions.PersonsContainsEntity;
import com.test.repositories.AttributeRepository;
import com.test.repositories.ValueRepository;
import com.test.services.AttributeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;

@Service
public class AttributeServiceImpl implements AttributeService {

    @Autowired // This means to get the bean called cityRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private AttributeRepository attributeRepository;
    @Autowired
    private ValueRepository valuesRepository;


    @Override
    public Iterable<Attribute> getAllAttributes() {
        return attributeRepository.findAll();
    }

    @Override
    public void deleteAttributeById(Long id, Boolean force) {
        Attribute deletedAttr = attributeRepository.findOne(id);

        if(valuesRepository.countByAttr(deletedAttr)>0){
            if(force!=null && force){
                valuesRepository.deleteAllByAttr(deletedAttr);
                attributeRepository.delete(deletedAttr);
            }
            else
            {
                throw new PersonsContainsEntity();
            }
        }
        else{
            attributeRepository.delete(deletedAttr);
        }
    }

    @Override
    public Attribute getAttributeById(Long id) {
        return attributeRepository.findOne(id);
    }

    @Override
    public Attribute updateAttributeById(Long id, Attribute attribute, Boolean force){

        ArrayList<String> usedData = this.usedAttributeData(id,attribute);
        if(usedData.size()>0) {
            if (force != null && force) {
                this.deleteUsedAttributesData(id, usedData);
                this.updateAttributeData(id,attribute);
            }
            else{
                String items = usedData.toString();
                throw new AttributesUsedException(usedData.toString());
            }
        }
        else{
            this.updateAttributeData(id,attribute);
        }
        return attribute;
    }

    @Override
    public Attribute createAttribute(Attribute attribute) {
        return attributeRepository.save(attribute);
    }

    private ArrayList<String> usedAttributeData(Long id, Attribute attributeToSave){
        ArrayList<String> usedData = new ArrayList<String>();
        Attribute currentAttribute = attributeRepository.findOne(id);

        ArrayList<String> currentData = currentAttribute.getData();
        ArrayList<String> tosaveData = attributeToSave.getData();

        for(String item:tosaveData){
            if(currentData.contains(item)){
                currentData.remove(item);
            }
        }

        if(currentData.size()>0){
            for(String item:currentData) {
                if(valuesRepository.countByAttrAndValue(currentAttribute,item)>0){
                    usedData.add(item);
                }
            }
        }

        return usedData;
    }

    private void updateAttributeData(Long id,Attribute attributeToSave){
        attributeRepository.save(attributeToSave);
    }

    private void deleteUsedAttributesData(Long id,ArrayList<String> usedData){
        Attribute currentAttribute = attributeRepository.findOne(id);
        Iterable<Value> values = valuesRepository.findAllByAttrAndValueIn(currentAttribute,usedData);
        for(Value val:values){
            valuesRepository.delete(val);
        }
    }

}
